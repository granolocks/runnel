#!/usr/bin/env ruby

require 'rubygems'
require 'minitest'
require 'minitest/autorun'

require File.expand_path('../lib/runnel.rb', __FILE__)

class TestRunnel < Minitest::Test
  def test_runnel_is_a_module
    assert_equal Runnel.class, Module
  end

  def test_runnel_has_an_api
    expected_methods = [ :config, :setup, :all, :kill, :start, :start_all, :kill_all, :create_from_tunnel_id ]
    invalid_api = expected_methods.map {|m| Runnel.methods.include?(m)}.include?(false)
    assert_equal invalid_api, false
  end

  def test_runnel_has_several_constants
    runnel_dir    = ENV['HOME']+"/.runnel"
    pids_dir      = "#{runnel_dir}/pids"
    pids_files    = "#{pids_dir}/*"
    tunnel_config = "#{runnel_dir}/tunnels.yml"

    test_array      = [runnel_dir, pids_dir, pids_files, tunnel_config]
    constants_array = [Runnel::RUNNEL_DIR, Runnel::PIDS_DIR, Runnel::PIDS_FILES, Runnel::TUNNEL_CONFIG]

    assert_equal test_array, constants_array
  end

  def test_config
    # Runnel.config returns the a hash for conifuring all the tunnels
    # which is read as YAML from Runnel::TUNNEL_CONFIG
    test_yaml = <<EOF
---
:socks_proxy:
  :name: My socks proxy for secure browsing on public WiFi
  :mport: 44488 #The autossh monitor port
  :command: -NfD 8080 mysecurebox.net
EOF

    # There has got to be a better way
    @backup_config = File.exists?(Runnel::TUNNEL_CONFIG) ?  File.read(Runnel::TUNNEL_CONFIG) : nil

    File.write Runnel::TUNNEL_CONFIG, test_yaml

    expected = YAML.load(test_yaml)
    actual   = Runnel.config

    # Clean up the mess
    if @backup_config
      File.write Runnel::TUNNEL_CONFIG, @backup_config
    else
      File.unlink Runnel::TUNNEL_CONFIG
    end

    assert_equal expected, actual
  end
end

class TestRunnelAutoSsh < Minitest::Test
  def test_auto_ssh_is_a_class
    assert_equal Runnel::AutoSsh.class, Class
  end
end
